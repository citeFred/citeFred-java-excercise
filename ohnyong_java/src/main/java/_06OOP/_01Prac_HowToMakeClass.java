package _06OOP;

 /*
 * 0. 클래스는 객체를 생성하기 위한 설계도이다.
 * -서로 관련 되어 있는 메서드의 집합
 * -객체들의 속성을 묶어 놓은 집합체

 * 객체를 다양하게 표현하지만
 * 클래스에 "설계" 된 정의된 내용대로 생성된 것이라 생각한다.
 * 객체는 속성(Field)과 동작(Method)으로 이루어져 있다.
 *
 * 클래스에서는 객체(가 생성 될 때)가 가져야 할 구성 Member가 선언된다.
 *
 * 객체의 Member 구성
 * 1. 생성자 ( Constructor ) : 객체를 생성 할 때 호출되는 일종의 메서드 new 연산자와 함께 사용
 *   - 역할 : 멤버변수(인스턴스 변수)들의 초기화
 *   - 구성하는 방법
 *       - 생성자 이름은 클래스 이름과 동일해야 함.
 *
 *       파라미터가 없는 것을 기본 생성자라 한다. default constructor
 *       public 생성자 이름(){
 *       }
 *
 *       public 생성자 이름([매개변수(파라미터)]){
 *       }
 *
 *      *같은 패키지에 있으면 import 없이 쓸 수 있음.(그 범위는 접근 제한자 public, private, protected)
 *       이 파일 => Prac02_SolutionClass에서 구현해도 동일 패키지기 때문에 Prac02_RunTest에서 호출 및 메서드 사용 가능.
 *
 *
 * 2. 필드==데이터가 저장되는곳==변수(Variable) 를 선언하는 것. 데이터의 타입을 지정한다 == 메모리의 전체 크기 범위를 정한다 생각하자.
 *   - 인스턴스변수(non-static변수)	: 객체를 먼저 생성하고 "객체명.변수명"로 접근.
 *   - 클래스변수(static변수)		: 메모리에 가장 먼저 올라가는 변수. "클래스명.변수명"으로 접근.
 *
 *
 * 3. 메서드(Method)==객체의 동작에 해당하는 실행 블록
 *   - 인스턴스 메서드(non-static메서드)	:"객체명.메서드명()"
 *   - 클래스 메서드(static메서드)			:"클래스명.메서드명()"
 * */

/*
*         클래스를 만들기 위해서는 4가지 STEP을 따라한다.
*       1. 만들려고 하는 설계도를 선언 (클래스 선언)     (Class 생성)
*       2. 객체가 가지고 있어야 할 속성(필드)를 정의     (변수이름과 타입 지정)
*       3. 객체를 생성하는 방식을 정의      (생성자-초기화-default 생성자 또는 파라미터를 받도록)
*       4. 객체가 가지고 있어야할 행위(method)를 정의
*
* */


//[1] Class를 생성 한다는 것 자체가 객체의 설계도를 만드는 것이다.
public class _01Prac_HowToMakeClass {
    //[2] 변수 초기값 선언, 할당 하기
    //[2-1] 인스턴스 변수를 선언하는 경우
    //  - 객체의 유전자, 설계도, 블루프린트라고 생각하자.
    //  - 객체명.변수명으로 가져 올 수 있다.
    int x;
    int y;
    //[2-2] 클래스 변수를 선언하는 경우
    int num1;
    int num2;
    int sum;
    static int z;

    //[3] 생성자 만들기 (Constructor)
    //[3-1] 클래스 명과 동일한 객체에 대한 설계도를 만들어 준다.
    public _01Prac_HowToMakeClass() {
        System.out.println("이 메시지가 나타난다면 기본 생성자가 호출되고 객체가 생성된 것입니다.");
    }

    //[4] 메서드(Method) 만들기 (기능, 동작)
    int Summary(int num1, int num2){
        //[4-2]
        sum=num1+num2;
        return sum;
    }
}
